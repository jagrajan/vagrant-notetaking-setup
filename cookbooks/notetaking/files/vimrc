if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

" Git related pluginsAC
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-surround'

Plug 'vim-airline/vim-airline'
Plug 'yggdroot/indentline'

Plug 'tpope/vim-commentary'

Plug 'christoomey/vim-tmux-navigator'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'bronson/vim-trailing-whitespace'
Plug 'godlygeek/tabular'
Plug 'ludovicchabant/vim-gutentags'

Plug 'joshdick/onedark.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mileszs/ack.vim'

Plug 'dense-analysis/ale'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

call plug#end()

let mapleader=","

set tabstop=2
set expandtab
set softtabstop=2
set shiftwidth=2

set number
set relativenumber

" Stay in visual mode when indenting. You will never have to run gv after
" performing an indentation.
vnoremap < <gv
vnoremap > >gv

" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
noremap Y y$

map <Space> :

let g:indentLine_setConceal = 0
set foldmethod=indent

"====[ Make the 81st column stand out ]====================

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

nnoremap <Leader>vi :tabedit $MYVIMRC<cr>
nnoremap <Leader>rv :so $MYVIMRC<cr>

nnoremap <Leader>rc :tabedit ~/.profile<cr>

nnoremap <Leader>fw :FixWhitespace<cr>
nnoremap <Leader>gc :Gcommit<cr>
nnoremap <Leader>gg :Gstatus<cr> :tabedit %<cr>
nnoremap <Leader>zz :tabedit %<cr>
nnoremap <Leader><space> :noh<cr>
nnoremap <Leader>tt :tabedit +terminal<cr>
nnoremap <Leader>ts :sp +terminal<cr>
nnoremap <Leader>tv :vs +terminal<cr>
tnoremap <c-q>tt <c-\><c-n> :tabedit +terminal<cr>
tnoremap <c-q>tv <c-\><c-n> :vs +terminal<cr>
tnoremap <c-q>ts <c-\><c-n> :sp +terminal<cr>

nnoremap <Leader>, :Files<cr>
nnoremap <Leader>a :Ack!<Space>

" Ale
let g:ale_sign_column_always = 1
" let g:ale_php_langserver_executable = 'langserver'
let g:deoplete#enable_at_startup = 1
" Use ALE and also some plugin 'foobar' as completion sources for all code.
" call deoplete#custom#option('sources', {
" \ '_': ['ale'],
" \})

inoremap <expr> <c-j> pumvisible() ? "\<C-n>" : "\<c-j>"
inoremap <expr> <c-k> pumvisible() ? "\<C-p>" : "\<c-n>"

syntax on
colorscheme onedark
